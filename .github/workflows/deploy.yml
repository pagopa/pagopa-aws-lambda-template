name: Deploy new generated image 

on:
  workflow_dispatch:
  #push:
  #  branches: [ "main" ]

env:
  REGION: eu-south-1  
  ECR_REPOSITORY: pagopadlambdatemplate
  
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Authenticated on OpenID identity provider to get AWS tokens
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: arn:aws:iam::407424444552:role/GitHub_OpenID
        aws-region: eu-south-1
        

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      #env:
      #  AWS_DEFAULT_REGION:
      #  AWS_REGION:
      #  AWS_ACCESS_KEY_ID:
      #  AWS_SECRET_ACCESS_KEY:
      #  AWS_SESSION_TOKEN:
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GHActions_deploy_session

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Trigger Terraform apply in pagopa-aws-infra
      run: |
          curl -X POST https://api.github.com/repos/pagopa/pagopa-aws-infra/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.ACTIONS_KEY }} \
          --data '{"event_type": "Terraform Trigger Workflow", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'" }}'
      
